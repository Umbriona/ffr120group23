clear all;
clc;

% simulation parameters
nPreyAgents = 100;
nPreyNeighbors = 6; % https://doi.org/10.1016/j.anbehav.2008.02.004
maxPreyTurningAngle = pi/5;
preySpeed = 1; % keep at 1, scale predator speed instead

nPredatorAgents = 1;
nPredatorNeighbors = 12; % https://doi.org/10.1016/j.anbehav.2008.02.004
maxPredatorTurningAngle = pi/10;
predatorSpeed = 1.5;

deltaT = 0.5;
maxTime = 1000;
fieldSize = 100;
captureDistance = 1;
nCompetitions = 5;

% neural network parameters
nPreyNNInputs = 3*(nPreyNeighbors + nPredatorAgents);
nPreyNNOutputs = 1;
nPreyNNHidden = floor(sqrt(nPreyNNInputs * nPreyNNOutputs));

nPredatorNNInputs = 3*(nPredatorNeighbors + nPredatorAgents - 1);
nPredatorNNOutputs = 1;
nPredatorNNHidden = floor(sqrt(nPredatorNNInputs * nPredatorNNOutputs));

% genetic algorithm parameters
populationSize = 25;
selectionParameter = (sqrt(5)-1)/2;
mutationFrequency = 1;
m
GAParams = struct(...
    'populationSize', 25, ...
    'selectionParameter', 0.618, ...
    'mutationFrequency', 1, ... % per chromosome
    'mutationDistance', 5);

%------------------------------------------------------------------------------

preyPopulation = InitializePopulation(GAParams, preyNNParams);
predatorPopulation = InitializePopulation(GAParams, predatorNNParams);

fitnessMatrix = zeros(GAParams.populationSize);
[fitnessMatrix, preyFitnesses, predatorFitnesses] = UpdateFitnesses(fitnessMatrix, preyPopulation, predatorPopulation, preySimParams, predatorSimParams, envSimParams, preyNNParams, predatorNNParams);

gen = 0;

while true
    
    gen = gen + 1;
    
    [fitnessMatrix, preyPopulation, preyFitnesses, predatorPopulation, predatorFitnesses] = SortPopulation(fitnessMatrix, preyPopulation, preyFitnesses, predatorPopulation, predatorFitnesses);
    
    preyPopulation = SteadyStateGAUpdate(preyPopulation, preyFitnesses, GAParams);
    predatorPopulation = SteadyStateGAUpdate(predatorPopulation, predatorFitnesses, GAParams);
    
    fitnessMatrix(populationSize-1:populationSize, :) = 0;
    fitnessMatrix(:, populationSize-1:populationSize) = 0;
    [fitnessMatrix, preyFitnesses, predatorFitnesses] = UpdateFitnesses(fitnessMatrix, preyPopulation, predatorPopulation, preySimParams, predatorSimParams, envSimParams);

end